KEEP FOR REFERENCE, DELETE ON PRODUCTION
 <div className="row">
                <Square value={squares[0]} onClick={()=> handleClick(0)}/>
                <Square value={squares[1]} onClick={()=> handleClick(1)}/>
                <Square value={squares[2]} onClick={()=> handleClick(2)}/>
            </div>
            <div className="row">
                <Square value={squares[3]} onClick={()=> handleClick(3)}/>
                <Square value={squares[4]} onClick={()=> handleClick(4)}/>
                <Square value={squares[5]} onClick={()=> handleClick(5)}/>
            </div>
            <div className="row">
                <Square value={squares[6]} onClick={()=> handleClick(6)}/>
                <Square value={squares[7]} onClick={()=> handleClick(7)}/>
                <Square value={squares[8]} onClick={()=> handleClick(8)}/>
            </div> 


--------LOGIN--------------

import { useState, ChangeEvent } from 'react';
import { login, Signup } from '../../lib/apiFunctions/User.ts';
import Button from '../Button/Button.tsx';
import style from './login.module.css';


type HandleClickType = (value: boolean) => void;
type LoginProps = {
    setLoggedIn: HandleClickType;
    onClose: () => void;
  };

function Login({ setLoggedIn, onClose }: LoginProps){  
    const [email, setEmail] = useState<string>('');
    const [password, setPassword] = useState<string>('');
    const [errors, setErrors] = useState<string>('');
        

    const handleUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {
        setEmail(event.target.value);
    };

    const handlePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {
        setPassword(event.target.value);
    };

    const SignIn = async () => {
        try {
          await login(email, password);
          setLoggedIn(true);
          setErrors(''); // Clear any previous errors
        } catch (error) {
          setErrors('There was an error with your submission.');
        }
      };

      const SignUp = async () => {
        try{
            await Signup(email, password);
        }catch (error) {
            setErrors('There was an error with your submission.');
          }
      }
    
        
    return(                
           
        <div className={style.main}> 

            <div className={style.content_wrapper}>
                <div className={style.close}>
                <Button onClick={onClose} className={style.close_btn} ><h1>X</h1></Button>
                </div>
                <div className={style.content_text}>
                    <h1>Sign in</h1>                    
                </div>
                
                <form className={style.formfield}>
                    
                    <div className={style.inputbox}>
                        <label className={style.label} htmlFor='username' >Username</label> 
                        <input className={style.inputfield} name="username" placeholder="Your mail" value={email} onChange={handleUsernameChange} />
                    </div>
                    <div className={style.inputbox}>
                        <label className={style.label} htmlFor='password' >Password</label>
                        <input className={style.inputfield} type="password" name="password" placeholder="Password"  value={password} onChange={handlePasswordChange} />
                    </div>
                </form>
                <div className={style.content_btn_wrapper}   >                   
                    <Button onClick={() => SignIn()} className={style.content_btn} >Sign in</Button> 
                </div>
                {errors ? (<div className={style.error}><p>{errors}</p></div>) : (<span></span>)}

                <div className={style.content_text}>
                    <h4>or</h4>
                    <h1>Sign up to be able to play</h1>                    
                </div>
                <div className={style.content_btn_wrapper}>
                    <Button onClick={() => SignUp()} className={style.content_btn} >CREATE ACCOUNT</Button>                    
                </div>
                
            </div>          
           
        </div>
   
    );
}

export default Login

------LOGIN STYLES-----------

.main{
    display: flex;
    height: 90%;
    width: 100%;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 2.4375rem;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);   
  
    padding: 5rem 20.5rem;/*debugging remove*/
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.6), rgba(255, 255, 255, 0.8));/*its a filter that makes the blurred background a little darker at the top and lighter at the bottom*/
   
    backdrop-filter: blur(20px); /*blur the background*/
    z-index: 99;
}
.close{
    display: flex;
    justify-content: flex-end;
    position: absolute;
    top: 0;
    right: 15px;
}
.close_btn{
    border: none;
    background: none;
   cursor: pointer;
}
.signBtn{
    
}
/* MAIN CONTENT STARTS */
.content_wrapper{
    display: flex;  
    width: 19.375rem;   
    padding: 3rem 1rem 2rem 1rem; /*mayby*/
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 2rem;    
    flex-shrink: 0;       
    border-radius: 1.5rem;
    box-shadow: 4px 4px 16px 0px rgba(0, 0, 0, 0.25);
    margin: 10rem 0rem 10rem 0rem;
    position: relative;
}
.content_text{
    display: flex;
    color: var(--secondary-font-clr);
    font-family: var(--default-font);
    flex-direction: column;
    align-items: center;
}
.content_text > h1{
    font-size: 1.5rem;
    font-style: normal;
    font-weight: 700;
    line-height: 1.5rem; /* 100% */
    letter-spacing: 0.01125rem;
}
.content_text > h4{
    font-size: 1.2rem;
    font-style: normal;
    font-weight: 700;
    line-height: 1.5rem; /* 100% */
    letter-spacing: 0.01125rem;
    margin: 1rem;
}
.content_text > p{
    font-size: 1.25rem;
    font-style: normal;
    font-weight: 400;
    line-height: 1.5rem; /* 120% */
    letter-spacing: 0.00938rem;
}
.content_btn_wrapper{
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 1.25rem;
    
}
.content_btn_wrapper > .content_btn{
    color: var(--primary-accent);
    background-color: none;
    border-radius: 3.5rem;
    border: 2px solid var(--primary-accent);
    /* width: calc(12.625rem + (1.5rem + 1.5rem)); */
    width: calc(10.625rem + (1.5rem + 1.5rem));
    padding: 1rem 1.5rem;
    text-align: center;
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 400;
    line-height: 1rem; /* 114.286% */
    letter-spacing: 0.07813rem;
    text-transform: uppercase;
    text-decoration: none;
    cursor: pointer;
}
.content_btn:active{
    transform: scale(.975rem);
}
/* MAIN CONTENT ENDS */
.formfield{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1.2rem;
}
.label{
    color: var(--secondary-font-clr);
    font-family: var(--default-font);
    font-size: .975em;
    font-style: normal;
    font-weight: 500;
    line-height: 1rem; /* 114.286% */
    letter-spacing: 0.07813rem;
    
}
.inputfield{
    border-radius: 22.5rem;
    border: none;
    background: lightgrey;
    padding: .5rem;
   
}
.inputbox{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    gap: .5rem;
}
.error{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: red;
}
